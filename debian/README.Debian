rng-tools for Debian
$Id: README.Debian,v 1.9 2004/04/06 14:27:47 hmh Exp $
=====================================================

This program runs conditioning tests (from FIPS 140-2, edition of 2002-10-10)
on a source of random data, and if that data passes the FIPS test, feeds it
back as trusted entropy to the in-kernel entropy pool.  Thus, it increases the
amount of true random data the kernel has available.

If the kernel runs out of entropy, reads /dev/random will block, and all
network activity that needs random numbers (such as TCP/IP) will halt until
the kernel manages to get a bit more of entropy.

See the rngd(8) manpage for more information.

FIPS 140-1 is available at 
http://csrc.nist.gov/cryptval/140-1.htm

FIPS 140-2 is available at
http://csrc.nist.gov/cryptval/140-2.htm
for the curious.

It was designed to be the user-space companion to the i810_rng and hw_random
drivers of the linux kernel, but it will work with anything that outputs random
bytes to a device or named pipe.

The initscript expects to read random data from /dev/hwrandom, and tries to
feed entropy back to /dev/random.  It also knows about /dev/misc/hw_random, for
udev.  /dev/hwrandom is a character device, major 10, minor 183 for the usual
Linux hardware RNG drivers.

If the RNG is not generating random output (as verified by FIPS 140-1, that
is), rngd will log errors, and will NOT touch the kernel entropy pool, so no
lasting harm will be done (other than wasting CPU time).


FAQ
---

* Q: "I don't have a /dev/hwrandom, and I am NOT using udev or devfs.  
     How do I get one?"
  A: mknod /dev/hwrandom c 10 183

* Q: "I don't have a /dev/hwrandom, and I AM using devfs or udev.  How do I 
     get one?"
  A: You should have a /dev/misc/hw_random device, IF the kernel driver has
     loaded properly.  The initscript should notice this and use this alternate
     location.

* Q: "can't open RNG file /dev/hwrandom: No such device. 
      What does that mean?"
  A: The hw_random device is missing from the kernel (or disabled, maybe
     because it couldn't detect a TRNG), the hw_random module failed to 
     install, or /dev/hwrandom has the wrong major/minor numbers. 

* Q: "I have an Intel TRNG (my chipset is a i8xx, after all), but 
     rngd logs a lot of errors to syslog.  What is happening?"
  A: Sorry, but you DON'T have a working TRNG.  Refer to the "testing rngd"
     section for more details.

* Q: "I see no errors anywhere, but rngd doesn't appear to be working.  Why?"
  A: See the "testing rngd" section for details.


Testing rngd
------------

First, test if the TRNG (hwrandom device) is generating numbers:

With rngd stopped (and as root), do:
  cat /dev/hwrandom | hexdump -C

If you get no output, either your TRNG is not working, it is not supported, or
the kernel driver is broken.  rngd will _not_ work (but it won't output any
errors, since it will block waiting for data from the TRNG, that will never
arrive).

You can measure the available TRNG bandwidth using something that counts data
read from a device.  E.g. install the "cstream" package, and do:

With rngd stopped (and as root), do:
  cstream -v 1 -n 100k -i /dev/hwrandom -o -

If the TRNG is working, it is time to test rngd.

To do this, you must first make sure your machine is in a position to survive
losing all ability to generate real random numbers for a small while.  It is
a good idea to unplug it from the network while the tests are running.

With rngd stopped (and as root), do:
  cat /dev/random | hexdump -C
  
You should notice how the hexdump stops for a small while when the kernel
entropy pool is drained empty.  You could also use cstream (as shown before) to
measure the available /dev/random bandwidth without rngd.

Now start rngd, and run the test again.  The stops due to an empty entropy pool
should be either much shorter, or inexistent.  The bandwidth available should
be much higher (at the very least, it should be about the same as the bandwidth
available from the TRNG). 

Leave the test running for a while, and watch the system log (facility DAEMON)
for warnings of failed FIPS tests.  You should not see any, or they should be
rare.


The Intel Hardware RNG
----------------------

The Intel hardware TRNG is provided by the Intel FWH (82802AB or 82802AC)
_optional_ component of the 8xx chipsets.  This chip hosts the firmware (BIOS)
and the TRNG, and is directly connected to the LPC bus in the South Bridge.

It shows up as memory mapped by the South Bridge, and its presence is difficult
to detect.  Regardless, the kernel driver has difficulties detecting the FWH,
and is easily misled into believing there is an TRNG active, when in fact there
isn't even an Intel FWH in the mainboard.

Almost no one but Intel itself uses this component (its main use is to host the
system BIOS, which a cheaper Flash device without a RNG can also do just as
easily).  Intel Desktop Boards usually have a 82802AB FWH, and the TRNG in
those is usually functional.  Intel Server Boards usually do NOT have a
82802AB/AC FWH.

http://developer.intel.com/design/chipsets/rng/CRIwp.htm has interesting
documentation on how the RNG behaves.  An important point to know is that it
has a variable bit rate, and that its entrpy (H) is better than 0.999.

Measurements on my D875PBZ show that you can expect an average of 24kbit/s of
random data from the 2.4.24 kernel driver (Intel documentation suggests this
should be on the order of 75kbit/s).  The kernel driver will eat up a LOT of
"system time", I hope this can be corrected in future versions of the driver.

/dev/random output in the test system archived an average of 120kbit/s with
rngd active, probably due to the entropy accounting bugs in most 2.4 kernels.

The suggested rngd -H parameter for the Intel TRNG is 0.998.


The VIA Hardware RNG
--------------------

VIA has outdone everyone else with their TRNG.  It is implemented by the
"Padlock" engine in their "Nehemiah" CPU core, and it is *extremely fast*,
unlike Intel's.

An excellent site to keep an eye for enhanced support for VIA's
TRNG is: http://peertech.org/hardware/viarng/

The suggested -H paremeter for the Padlock TRNG is 0.75 if the whitener is
disabled, or 0.98 if the withener is enabled.  You're strongly advised to run
the TRNG with the whitener enabled.

 -- Henrique de Moraes Holschuh <hmh@debian.org>
